buildscript {
    repositories {
        maven { 
        	name = 'forge'
        	url = 'https://files.minecraftforge.net/maven' 
        }
        maven {
            name = "SpongePowered"
        	url = 'https://repo.spongepowered.org/repository/maven-public/' 
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath "org.zaproxy.gradle:gradle-plugin-crowdin:0.2.1"    }
}

plugins {
    id "org.zaproxy.crowdin" version "0.2.1"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "org.zaproxy.crowdin"

version =  property("mc_version")+"-"+property("mod_version")
group = property("mod_group")
archivesBaseName = property("mod_name") + "_" + property("version_name")

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api
    main {
        java {
            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
        }
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: property("mapping_channel"), version: property("mappings_version") + "-" + property("mc_version")
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
			arg "-mixin.config=" + mod_id + ".mixins.json"
			
            mods {
                dragonsurvival {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
			arg "-mixin.config=" + mod_id + ".mixins.json"

            mods {
                dragonsurvival {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, mod_id + ".refmap.json"
}

repositories {
    maven { 
    	name = "Gecholib maven"
    	url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    implementation ("software.bernie.geckolib:geckolib-forge-${property('mc_version')}:${property('geckolib_version')}")

    compileOnly ("mezz.jei:jei-${property('mc_version')}:${property('jei_version')}:api")
    runtimeOnly ("mezz.jei:jei-${property('mc_version')}:${property('jei_version')}")

    compileOnly files("lib/appleskin-api.jar")

    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
}

jar.manifest.attributes([
        "Specification-Title": mod_id,
        "Specification-Vendor": "Dragon Survival Team",
        "Specification-Version": "1", // We are version 1 of ourselves
        "Implementation-Title": project.name,
        "Implementation-Version": "${version}",
        "Implementation-Vendor" :"Dragon Survival Team",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "MixinConfigs": mod_id + ".mixins.json"
])

jar.finalizedBy('reobfJar')

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
def props = new Properties()
file("crowdin.properties").withInputStream { props.load(it) }

project.crowdin { crowdinSpec ->
    crowdinSpec.credentials { credentialsSpec ->
        credentialsSpec.getToken().set(props.getProperty("access_token"))
    }

    crowdinSpec.configuration { configurationSpec ->
        configurationSpec.getFile().set(file("crowdin.yml"))
        configurationSpec.tokens.put("%crowdin_download_path%", props.getProperty("download_dir"))
    }
}