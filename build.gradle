buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        maven {
            name = "SpongePowered"
        	url = 'https://repo.spongepowered.org/repository/maven-public/' 
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

version = mc_version + "-" + mod_version
group = property("mod_group")
archivesBaseName = property("mod_file")


compileJava.options.encoding = 'UTF-8'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api
    main {
        java {
            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
        }
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "parchment", version: "${mappings_version}-${mc_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
			arg "-mixin.config=" + mod_id + ".mixins.json"
			
            mods {
                dragonsurvival {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        server {
            workingDirectory project.file('server')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
			arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                dragonsurvival {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        data {
            workingDirectory project.file('data')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', "-mixin.config=" + mod_id + ".mixins.json", file('src/generated/resources/')
            mods {
                dragonsurvival {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

mixin {
    add sourceSets.main, mod_id + ".refmap.json"
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { 
    	name = "Gecholib maven"
    	url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { url = "https://cursemaven.com" }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    implementation fg.deobf("software.bernie.geckolib:geckolib-${property('geckolib_mc_version')}-forge:${property('geckolib_version')}")

    compileOnly fg.deobf("mezz.jei:jei-${property('mc_version')}:${property('jei_version')}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${property('mc_version')}:${property('jei_version')}")

   // compileOnly files("lib/appleskin-api.jar")

    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar.manifest.attributes([
        "Specification-Title": mod_id,
        "Specification-Vendor": "Dragon Survival Team",
        "Specification-Version": "1", // We are version 1 of ourselves
        "Implementation-Title": project.name,
        "Implementation-Version": "${version}",
        "Implementation-Vendor" :"Dragon Survival Team",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "MixinConfigs": mod_id + ".mixins.json"
])

jar.finalizedBy('reobfJar') 
